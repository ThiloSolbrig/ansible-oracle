---
# Variables:
#   _key_owner: oracle
#   _key_owner_home: /home/oracle
#
- name: Create .ssh directory for user {{ _key_owner }}
  ansible.builtin.file:
    path: "{{ _key_owner_home }}/.ssh"
    owner: "{{ _key_owner }}"
    group: "{{ _key_group }}"
    mode: "0700"
    state: directory

# Keys are only created when not existing.
- name: Create ssh-key for user {{ _key_owner }}
  community.crypto.openssh_keypair:
    path: "{{ _key_owner_home }}/.ssh/{{ orahost_ssh_keyname }}"
    owner: "{{ _key_owner }}"
    group: "{{ _key_group }}"
    force: false
    mode: "0600"
    size: "{{ orahost_ssh_key_size }}"
    type: "{{ orahost_ssh_key_type }}"

- name: Read public key from remote host for user {{ _key_owner }}
  ansible.builtin.slurp:
    src: "{{ _key_owner_home }}/.ssh/{{ orahost_ssh_keyname }}.pub"
  register: ssh_pubkey_res

# All public keys from all cluster node are added to all authorized keys
# loop over orasw_meta_cluster_hostgroup and write public key to target host.
- name: Add public key to authorized_keys for user {{ _key_owner }}
  ansible.posix.authorized_key:
    key: >-
      {{ hostvars[item]['ssh_pubkey_res']['content'] | b64decode | split('\n') | first }}
    user: "{{ _key_owner }}"
    state: present
  with_items: "{{ groups[orasw_meta_cluster_hostgroup] }}"

- name: Read host keys from remote host with ssh-keyscan
  ansible.builtin.command: ssh-keyscan -t {{ orahost_ssh_hostkeytypes | join(',') }} {{ ansible_hostname }}
  register: ssh_hostkey_res
  changed_when: ssh_hostkey_res.rc == 0

- name: Ensure known_hosts file exists with right permissions
  ansible.builtin.file:
    path: "{{ _key_owner_home }}/.ssh/known_hosts"
    state: touch
    owner: "{{ _key_owner }}"
    group: "{{ _key_group }}"
    mode: "0600"
  register: _known_hosts_state
  changed_when: _known_hosts_state.diff.before.state == 'absent'

- name: Add hostkeys to user {{ _key_owner }}
  ansible.builtin.known_hosts:
    name: "{{ _hostkey_for_host[0] | split(' ') | first }}"
    key: "{{ _hostkey_for_host[0] }}"
    path: "{{ _key_owner_home }}/.ssh/known_hosts"
    state: present
  delegate_to: "{{ _hostkey_for_host[1] }}"
  loop: "{{ ssh_hostkey_res.stdout_lines | product(groups[orasw_meta_cluster_hostgroup]) }}"
  loop_control:
    loop_var: _hostkey_for_host
    label: "{{ (_hostkey_for_host[0] | split(' '))[0] }} {{ (_hostkey_for_host[0] | split(' '))[1] }}"
  throttle: 1
